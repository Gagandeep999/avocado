// ====== Class declarations ====== //
class POLYNOMIAL {
	public evaluate(integer x) : integer;
};

class LINEAR inherits POLYNOMIAL {
	private integer a;
	private integer b;

	public build(integer A, integer B) : LINEAR;
	public evaluate(integer x) : integer;
};

class QUADRATIC inherits POLYNOMIAL {
	private integer a;
	private integer b;
	private integer c;

	public build(integer A, integer B, integer C) : QUADRATIC;
	public evaluate(integer x) : integer;
};

// ====== Function Definitions ====== //
POLYNOMIAL::evaluate(integer x) : integer
  do
    return (0);
  end

LINEAR::evaluate(integer x) : integer
  local
    integer result;
  do
    result = 0;
    result = a * x + b;
    return (result);
  end

QUADRATIC::evaluate(integer x) : integer
  local
    integer result;
  do    //Using Horner's method
    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  end
/*
LINEAR::build(integer A, integer B) : LINEAR
  local
    LINEAR new_function;
  do
    new_function.a = A;
    new_function.b = B;
    return (new_function);
  end

QUADRATIC::build(integer A, integer B, integer C) : QUADRATIC
  local
    QUADRATIC new_function;
  do
    new_function.a = A;
    new_function.b = B;
    new_function.c = C;
    return (new_function);
  end
*/

// ====== main ====== //
main
  local
    integer f1;
    integer f2;
    integer counter;
  do
    f1 = 1;
    f2 = 0;
    counter = 1;

    while(counter <= 10)
      do
        write(counter);
        write(f1);
        write(f2);
      end;
  end