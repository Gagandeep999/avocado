START  -> #CREATEROOT PROGRAM .

PROGRAM  -> #CREATENODE_CLASSLIST REPTCLASSDECL #ADD2ROOT #CREATENODE_FUNCDEFLIST REPTFUNCDEF #ADD2ROOT main #CREATENODE_STATBLOCK FUNCBODY #ADD2PARENT .

REPTCLASSDECL -> CLASSDECL #ADD2PARENT REPTCLASSDECL .
REPTCLASSDECL ->  .

CLASSDECL  -> #CREATENODE_DECL class id #ADD2PARENT #CREATENODE_INHERITLIST OPTCLASSDECL2 #ADD2PARENT lcurbr #CREATENODE_MEMBLIST MEMBER_DECLARATIONS #ADD2PARENT rcurbr semi .

REPTFUNCDEF -> FUNCDEF #ADD2PARENT REPTFUNCDEF .
REPTFUNCDEF ->  .

FUNCDEF  -> #CREATENODE_FUNCDEF FUNCTION_SIGNATURE #ADD2PARENT #CREATENODE_STATBLOCK FUNCBODY #ADD2PARENT semi .

MEMBER_DECLARATIONS  -> VISIBILITY #ADD2PARENT MEMBER_DECLARATION #ADD2PARENT MEMBER_DECLARATIONS .
MEMBER_DECLARATIONS  ->  .

MEMBER_DECLARATION -> #CREATENODE_MEMBDECL id #ADD2PARENT FUNCTION_OR_VARIABLE_DECLARATION #ADD2PARENT .
MEMBER_DECLARATION -> #CREATENODE_MEMBDECL TYPE_NON_ID #ADD2PARENT VARIABLE_DECLARATION #ADD2PARENT .

FUNCTION_OR_VARIABLE_DECLARATION -> FUNCTION_DECLARATION #ADD2PARENT .
FUNCTION_OR_VARIABLE_DECLARATION -> VARIABLE_DECLARATION #ADD2PARENT .

VISIBILITY -> public . //because in MEMBER_DECLARATIONS we directly do ADD2PARENT so we
VISIBILITY -> private . //need to send a node from this method.

STATEMENT -> #CREATENODE_GETSTAT #CREATENODE_VAR ASSIGN_STATEMENT_OR_FUNCTION_CALL #ADD2PARENT .
STATEMENT -> #CREATENODE_IFSTAT if lpar REL_EXPRESSION #ADD2PARENT rpar then STATEMENT_BLOCK #ADD2PARENT else STATEMENT_BLOCK #ADD2PARENT semi .
STATEMENT -> #CREATENODE_WHILESTAT while lpar REL_EXPRESSION #ADD2PARENT rpar STATEMENT_BLOCK #ADD2PARENT semi .
STATEMENT -> #CREATENODE_READSTAT read lpar STATEMENT_VARIABLE #ADD2PARENT rpar semi .
STATEMENT -> #CREATENODE_WRITESTAT write lpar EXPRESSION #ADD2PARENT rpar semi .
STATEMENT -> #CREATENODE_RETURNSTAT return lpar EXPRESSION #ADD2PARENT rpar semi .

STATEMENT_VARIABLE -> id STATEMENT_VARIABLE_OR_FUNCTION_CALL #ADD2PARENT .

STATEMENT_VARIABLE_OR_FUNCTION_CALL  -> #CREATENODE_DATAMEMBER #CREATENODE_INDICES INDICES #ADD2PARENT #CREATENODE_DATAMEMBER STATEMENT_VARIABLE_EXT .
STATEMENT_VARIABLE_OR_FUNCTION_CALL  -> lpar #CHANGE2FUNCCALL #CREATENODE_APARAMS FUNCTION_CALL_PARAMS #ADD2PARENT rpar STATEMENT_FUNCTION_CALL . //NOT ADDING #ADD2PARENT AFTER STATEMENT_FUNCTION_CALL BECAUSE WE DONT WANT TO ADD TO FUNCTION_CALL_PARAMS

STATEMENT_VARIABLE_EXT -> dot STATEMENT_VARIABLE .
STATEMENT_VARIABLE_EXT ->  .

STATEMENT_FUNCTION_CALL  -> dot STATEMENT_VARIABLE .

ASSIGN_STATEMENT_OR_FUNCTION_CALL  -> #CREATENODE_DATAMEMBER id #ADD2PARENT VARIABLE_OR_FUNCTION_CALL_EXT #ADD2PARENT .

VARIABLE_OR_FUNCTION_CALL_EXT  -> #CREATENODE_INDICES INDICES #ADD2PARENT #ADD2PARENT VARIABLE_EXT .
VARIABLE_OR_FUNCTION_CALL_EXT  -> lpar #CREATENODE_APARAMS FUNCTION_CALL_PARAMS #ADD2PARENT #CHANGE2FUNCCALL rpar FUNCTION_CALL_EXT .

VARIABLE_EXT -> ASSIGNMENT_OP #ADD2PARENT #ADD2PARENT #CHANGE2ASS EXPRESSION #ADD2PARENT semi .
VARIABLE_EXT -> dot ASSIGN_STATEMENT_OR_FUNCTION_CALL #ADD2PARENT .

FUNCTION_CALL_EXT  -> semi .
FUNCTION_CALL_EXT  -> dot ASSIGN_STATEMENT_OR_FUNCTION_CALL #ADD2PARENT .

FUNCTION_PARAMS  -> #CREATENODE_FPARAM TYPE #ADD2PARENT id #ADD2PARENT #CREATENODE_DIMLIST ARRAY_DIMENSIONS #ADD2PARENT #ADD2PARENT FUNCTION_PARAMS_TAILS .
FUNCTION_PARAMS  ->  .

ADD_OP -> plus .
ADD_OP -> minus .
ADD_OP -> or .

OPTCLASSDECL2  -> inherits id #ADD2PARENT INHERITED_CLASSES .
OPTCLASSDECL2  ->  .

REL_EXPRESSION -> #CREATENODE_RELEXPR ARITH_EXPRESSION #ADD2PARENT COMPARE_OP #ADD2PARENT ARITH_EXPRESSION #ADD2PARENT .
REL_EXPRESSION ->  .

FUNCTION_DECLARATION -> lpar #CREATENODE_FUNCPARAMLIST FUNCTION_PARAMS #ADD2PARENT rpar colon TYPE_OR_VOID #ADD2PARENT semi .

FUNCTION_CALL_PARAMS_TAILS -> FUNCTION_CALL_PARAMS_TAIL #ADD2PARENT FUNCTION_CALL_PARAMS_TAILS .
FUNCTION_CALL_PARAMS_TAILS ->  .


FUNCTION_CALL_PARAMS_TAIL  -> comma EXPRESSION .

FUNCTION_CALL_PARAMS -> EXPRESSION #CREATENODE_FUNCCALLPARAMSTAILS FUNCTION_CALL_PARAMS_TAILS .
FUNCTION_CALL_PARAMS ->  .

OPTFUNCBODY0  -> local VARIABLE_DECLARATIONS .
OPTFUNCBODY0  ->  .

ARRAY_DIMENSIONS -> ARRAY_SIZE #ADD2PARENT ARRAY_DIMENSIONS .
ARRAY_DIMENSIONS ->  .

EXPRESSION -> ARITH_EXPRESSION REL_EXPRESSION_OR_NULL .

REL_EXPRESSION_OR_NULL -> COMPARE_OP ARITH_EXPRESSION .
REL_EXPRESSION_OR_NULL ->  .

REPTSTATEMENT -> STATEMENT REPTSTATEMENT .
REPTSTATEMENT ->  .

ARITH_EXPRESSION -> TERM RIGHT_REC_ARITH_EXPRESSION .

RIGHT_REC_ARITH_EXPRESSION -> ADD_OP TERM RIGHT_REC_ARITH_EXPRESSION .
RIGHT_REC_ARITH_EXPRESSION ->  .

FUNCTION_SIGNATURE -> id FUNCTION_SIGNATURE_NAMESPACE .

FUNCTION_SIGNATURE_NAMESPACE -> FUNCTION_SIGNATURE_EXT .
FUNCTION_SIGNATURE_NAMESPACE -> sr id FUNCTION_SIGNATURE_EXT .

FUNCTION_SIGNATURE_EXT -> lpar #CREATENODE_FUNCPARAMLIST FUNCTION_PARAMS #ADD2PARENT rpar colon TYPE_OR_VOID .

FUNCTION_PARAMS_TAILS  -> FUNCTION_PARAMS_TAIL FUNCTION_PARAMS_TAILS .
FUNCTION_PARAMS_TAILS  ->  .

INHERITED_CLASSES  -> comma id #ADD2PARENT INHERITED_CLASSES .
INHERITED_CLASSES  ->  .

SIGN -> plus .
SIGN -> minus .

COMPARE_OP -> eq .
COMPARE_OP -> neq .
COMPARE_OP -> lessthan .
COMPARE_OP -> gt .
COMPARE_OP -> leq .
COMPARE_OP -> geq .

INDEX  -> lsqbr ARITH_EXPRESSION rsqbr .

VARIABLE_DECLARATIONS  -> TYPE VARIABLE_DECLARATION VARIABLE_DECLARATIONS .
VARIABLE_DECLARATIONS  ->  .

FACTOR -> VARIABLE_FUNCTION_CALL .
FACTOR -> SIGN FACTOR .
FACTOR -> lpar ARITH_EXPRESSION rpar .
FACTOR -> not FACTOR .
FACTOR -> intnum .
FACTOR -> floatnum .

VARIABLE_FUNCTION_CALL -> id VARIABLE_OR_FUNCTION_CALL .

VARIABLE_OR_FUNCTION_CALL  -> INDICES FACTOR_VARIABLE .
VARIABLE_OR_FUNCTION_CALL  -> lpar FUNCTION_CALL_PARAMS rpar FACTOR_FUNCTION_CALL .

FACTOR_VARIABLE  -> dot VARIABLE_FUNCTION_CALL .
FACTOR_VARIABLE  ->  .

FACTOR_FUNCTION_CALL -> dot VARIABLE_FUNCTION_CALL .
FACTOR_FUNCTION_CALL ->  .

TERM -> FACTOR RIGHT_REC_TERM .

MULT_OP  -> mult .
MULT_OP  -> div .
MULT_OP  -> and .

RIGHT_REC_TERM -> MULT_OP FACTOR RIGHT_REC_TERM .
RIGHT_REC_TERM ->  .

TYPE_OR_VOID -> TYPE .
TYPE_OR_VOID -> void .

TYPE -> TYPE_NON_ID .
TYPE -> id .

TYPE_NON_ID  -> integer .
TYPE_NON_ID  -> float .

ARRAY_SIZE -> lsqbr OPTIONAL_INT rsqbr .

OPTIONAL_INT -> intnum .
OPTIONAL_INT ->  .

VARIABLE_DECLARATION -> id ARRAY_DIMENSIONS semi .

FUNCBODY  -> OPTFUNCBODY0 do REPTSTATEMENT end .

STATEMENT_BLOCK  -> STATEMENT .
STATEMENT_BLOCK  -> do REPTSTATEMENT end .
STATEMENT_BLOCK  ->  .

ASSIGNMENT_OP  -> equal .

FUNCTION_PARAMS_TAIL -> comma TYPE id ARRAY_DIMENSIONS .

INDICES  -> INDEX #ADD2PARENT INDICES .
INDICES  ->  .

// IN THE CODE ANY TIME YOU HIT A TERMINAL CREATE A NODE AND ADD THE VALUE OF THE TOKEN TO THE NODE VALUE
// EXCEPTIONS - main; lcurbr; rcurbr; semi; class; lpar; rpar; if; equal; comma
// CREATENODE() SHOULD CREATE A NODE OBJECT BASED ON THE CURRENT TOKEN
// VERIFY IF THE NODE RETURNED IS NULL OR NOT; DECIDE STRATERGY
// #FIX_1 :- STORE TOS IN A VARiable; POP 2 ELEMENT FROM STACK; PUSH VAR BACK TO STACK