START -> PROGRAM  .

PROGRAM -> #1 REPTCLASSDECL #2 REPTFUNCDEF #2 main FUNCBODY #2 #2 .

REPTCLASSDECL -> #1 CLASSDECL #2 REPTCLASSDECL #4 .
REPTCLASSDECL ->  .

CLASSDECL -> class id #2 OPTCLASSDECL2 #2 lcurbr MEMBER_DECLARATIONS #2 rcurbr semi  .

REPTFUNCDEF -> #1 FUNCDEF #2 REPTFUNCDEF #4  .
REPTFUNCDEF ->  .

FUNCDEF -> #1(function) FUNCTION_SIGNATURE #2 FUNCBODY #2 .

MEMBER_DECLARATIONS -> #1 VISIBILITY MEMBER_DECLARATION #3 #2 MEMBER_DECLARATIONS #4 .
MEMBER_DECLARATIONS ->  .

MEMBER_DECLARATION -> id FUNCTION_OR_VARIABLE_DECLARATION #3 .
MEMBER_DECLARATION -> TYPE_NON_ID VARIABLE_DECLARATION #3 .

FUNCTION_OR_VARIABLE_DECLARATION -> FUNCTION_DECLARATION  .
FUNCTION_OR_VARIABLE_DECLARATION -> VARIABLE_DECLARATION .

VISIBILITY -> public  .
VISIBILITY -> private  .

STATEMENT -> if lpar REL_EXPRESSION #2 rpar then STATEMENT_BLOCK #2 else STATEMENT_BLOCK #2 semi  .
STATEMENT -> while lpar REL_EXPRESSION #2 rpar STATEMENT_BLOCK #2 semi  .
STATEMENT -> read lpar STATEMENT_VARIABLE #6 #5 #2 rpar semi  .
STATEMENT -> write lpar EXPRESSION #2 rpar semi  .
STATEMENT -> return lpar EXPRESSION #2 rpar semi  .
STATEMENT -> ASSIGN_STATEMENT_OR_FUNCTION_CALL .

STATEMENT_VARIABLE -> #1(item) id #2 STATEMENT_VARIABLE_OR_FUNCTION_CALL .

STATEMENT_VARIABLE_OR_FUNCTION_CALL -> INDICES #2 STATEMENT_VARIABLE_EXT .
STATEMENT_VARIABLE_OR_FUNCTION_CALL -> lpar FUNCTION_CALL_PARAMS #2 rpar STATEMENT_FUNCTION_CALL .

STATEMENT_VARIABLE_EXT -> dot STATEMENT_VARIABLE .
STATEMENT_VARIABLE_EXT -> .

STATEMENT_FUNCTION_CALL -> dot STATEMENT_VARIABLE .

ASSIGN_STATEMENT_OR_FUNCTION_CALL -> #1(item) id #2 VARIABLE_OR_FUNCTION_CALL_EXT .

VARIABLE_OR_FUNCTION_CALL_EXT -> INDICES #2 VARIABLE_EXT .
VARIABLE_OR_FUNCTION_CALL_EXT -> lpar FUNCTION_CALL_PARAMS #2 rpar FUNCTION_CALL_EXT .

VARIABLE_EXT -> #5 ASSIGNMENT_OP #3 EXPRESSION #2 semi .
VARIABLE_EXT -> dot ASSIGN_STATEMENT_OR_FUNCTION_CALL .

FUNCTION_CALL_EXT -> #5 #1(func_call) #3 semi .
FUNCTION_CALL_EXT -> dot ASSIGN_STATEMENT_OR_FUNCTION_CALL .

FUNCTION_PARAMS -> #1 #1(param) TYPE #2 id #2 ARRAY_DIMENSIONS #2 #2 FUNCTION_PARAMS_TAILS #4 .
FUNCTION_PARAMS ->  .

ADD_OP -> plus  .
ADD_OP -> minus  .
ADD_OP -> or  .

OPTCLASSDECL2 -> inherits id #2 INHERITED_CLASSES #4 .
OPTCLASSDECL2 ->  .

REL_EXPRESSION -> ARITH_EXPRESSION COMPARE_OP #3 ARITH_EXPRESSION #2 .
REL_EXPRESSION ->  .

FUNCTION_DECLARATION -> #1 lpar FUNCTION_PARAMS #2 rpar colon TYPE_OR_VOID #2 semi  .

FUNCTION_CALL_PARAMS_TAILS -> #1 FUNCTION_CALL_PARAMS_TAIL #2 FUNCTION_CALL_PARAMS_TAILS #4  .
FUNCTION_CALL_PARAMS_TAILS ->  .

FUNCTION_CALL_PARAMS_TAIL -> comma EXPRESSION  .

FUNCTION_CALL_PARAMS -> #1 EXPRESSION #2 FUNCTION_CALL_PARAMS_TAILS #4 .
FUNCTION_CALL_PARAMS ->  .

OPTFUNCBODY0 -> local VARIABLE_DECLARATIONS .
OPTFUNCBODY0 ->  .

ARRAY_DIMENSIONS -> #1 ARRAY_SIZE #2 #7 ARRAY_DIMENSIONS #4 .
ARRAY_DIMENSIONS ->  .

EXPRESSION -> ARITH_EXPRESSION  REL_EXPRESSION_OR_NULL #3 #7 .

REL_EXPRESSION_OR_NULL -> COMPARE_OP ARITH_EXPRESSION #2 .
REL_EXPRESSION_OR_NULL -> .

REPTSTATEMENT -> #1 STATEMENT #2 REPTSTATEMENT #4 .
REPTSTATEMENT ->  .

ARITH_EXPRESSION -> TERM RIGHT_REC_ARITH_EXPRESSION #6 .

RIGHT_REC_ARITH_EXPRESSION ->  .
RIGHT_REC_ARITH_EXPRESSION -> ADD_OP #3 TERM #2 RIGHT_REC_ARITH_EXPRESSION .

FUNCTION_SIGNATURE -> #1 id FUNCTION_SIGNATURE_NAMESPACE #4 .

FUNCTION_SIGNATURE_NAMESPACE -> #2 FUNCTION_SIGNATURE_EXT .
FUNCTION_SIGNATURE_NAMESPACE -> #1(namespace) #3 #7 #2 coloncolon id #2 FUNCTION_SIGNATURE_EXT .

FUNCTION_SIGNATURE_EXT -> #1 lpar FUNCTION_PARAMS #2 rpar colon #1(returns) TYPE_OR_VOID #2 #2 .

FUNCTION_PARAMS_TAILS -> #1 FUNCTION_PARAMS_TAIL #2 FUNCTION_PARAMS_TAILS #4 .
FUNCTION_PARAMS_TAILS ->  .

INHERITED_CLASSES -> #1 comma id #2 INHERITED_CLASSES #4 .
INHERITED_CLASSES ->  .

SIGN -> plus  .
SIGN -> minus  .

COMPARE_OP -> eq  .
COMPARE_OP -> neq  .
COMPARE_OP -> lessthan  .
COMPARE_OP -> gt  .
COMPARE_OP -> leq  .
COMPARE_OP -> geq  .

INDEX -> lsqbr ARITH_EXPRESSION rsqbr  .

VARIABLE_DECLARATIONS -> #1 TYPE VARIABLE_DECLARATION #3 #2 VARIABLE_DECLARATIONS #4 .
VARIABLE_DECLARATIONS ->  .

FACTOR -> VARIABLE_FUNCTION_CALL #6 #5 .
FACTOR -> intnum  .
FACTOR -> floatnum  .
FACTOR -> lpar ARITH_EXPRESSION rpar  .
FACTOR -> #1 not #2 FACTOR #2 .
FACTOR -> #1 SIGN #2 FACTOR #2 .

VARIABLE_FUNCTION_CALL -> #1(item) id #2 VARIABLE_OR_FUNCTION_CALL .

VARIABLE_OR_FUNCTION_CALL -> INDICES #2 FACTOR_VARIABLE .
VARIABLE_OR_FUNCTION_CALL -> lpar FUNCTION_CALL_PARAMS #2 rpar FACTOR_FUNCTION_CALL .

FACTOR_VARIABLE -> dot VARIABLE_FUNCTION_CALL .
FACTOR_VARIABLE -> .

FACTOR_FUNCTION_CALL -> dot VARIABLE_FUNCTION_CALL .
FACTOR_FUNCTION_CALL -> .

TERM -> FACTOR RIGHT_REC_TERM #6 .

MULT_OP -> mult  .
MULT_OP -> div  .
MULT_OP -> and  .

RIGHT_REC_TERM -> MULT_OP #3 FACTOR #2 RIGHT_REC_TERM .
RIGHT_REC_TERM ->  .

TYPE_OR_VOID -> TYPE .
TYPE_OR_VOID -> void .

TYPE -> TYPE_NON_ID .
TYPE -> id  .

TYPE_NON_ID -> integer .
TYPE_NON_ID -> float .

ARRAY_SIZE -> #1 lsqbr OPTIONAL_INT #2 #7 rsqbr .

OPTIONAL_INT -> #1 intnum #2 .
OPTIONAL_INT -> .

VARIABLE_DECLARATION -> #1(var) id #2 ARRAY_DIMENSIONS #2 semi  .

FUNCBODY -> #1 OPTFUNCBODY0 #2 do REPTSTATEMENT #2 end  .

STATEMENT_BLOCK -> #1 do REPTSTATEMENT #4 end  .
STATEMENT_BLOCK -> #1 STATEMENT #2 .
STATEMENT_BLOCK ->  .

ASSIGNMENT_OP -> equal  .

FUNCTION_PARAMS_TAIL -> #1(param) comma TYPE #2 id #2 ARRAY_DIMENSIONS #2 .

INDICES -> #1 INDEX #2 INDICES #4 .
INDICES ->  .

---------------------------------------------------------------------------------------------------------------------

        ---------
Stack:  | X | Y     <- top of stack
        ---------

#1 -> create a node Z with the LHS name, push Z to stack
#1(input) -> create a node Z with the name 'input', push Z to stack
#2 -> pop X & Y, make Y right child of X, push X
#3 -> pop X & Y, make X left child of Y, push Y
#4 -> pop X & Y, X adopts Y's children, push X
#5 -> group all the Xs on top the stack with the same name under one Z
#6 -> delete Y
#7 -> if X has only one child, replace it with the child

#1->A_CREATEADD(NAME)
#2->A_RIGHTCHILD()
#3->A_LEFTCHILD()
#4->A_ADOPTS()
#5->A_GROUP()
#6->A_DELETE()
#7->A_UNIFY()